"use strict";
// File: omniscript-core/parser/src/block-parsers/slide.ts
// What: Parser for @slide blocks for presentations
// Why: Extract slide properties, content, and bullet points
// Related: types.ts, content.ts, lexer/index.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSlideBlock = parseSlideBlock;
const lexer_1 = require("../lexer");
const content_1 = require("./content");
function parseSlideBlock(rawContent) {
    const slide = { type: 'slide' };
    let slideContent = rawContent;
    // Extract bullets block if present using a more robust approach
    const bulletsStartMatch = slideContent.match(/bullets\s*\{/);
    if (bulletsStartMatch && bulletsStartMatch.index !== undefined) {
        const bulletsStart = bulletsStartMatch.index + bulletsStartMatch[0].length;
        let depth = 1;
        let bulletsEnd = bulletsStart;
        // Find the matching closing brace
        while (bulletsEnd < slideContent.length && depth > 0) {
            const ch = slideContent[bulletsEnd];
            if (ch === '{')
                depth++;
            else if (ch === '}')
                depth--;
            bulletsEnd++;
        }
        if (depth === 0) {
            const bulletsContent = slideContent.slice(bulletsStart, bulletsEnd - 1);
            // Parse bullets as array of strings
            const bullets = [];
            const bulletRegex = /"([^"]+)"\s*;/g;
            let bulletMatch;
            while ((bulletMatch = bulletRegex.exec(bulletsContent))) {
                if (bulletMatch[1]) {
                    bullets.push(bulletMatch[1]);
                }
            }
            if (bullets.length > 0) {
                slide.bullets = bullets;
            }
            // Remove bullets block from content
            slideContent =
                slideContent.slice(0, bulletsStartMatch.index) + slideContent.slice(bulletsEnd);
            slideContent = slideContent.trim();
        }
    }
    const lines = slideContent.split('\n');
    const contentLines = [];
    const kvContent = [];
    for (const line of lines) {
        if (/^[a-zA-Z0-9_]+\s*:.+;/.test(line.trim())) {
            kvContent.push(line);
        }
        else {
            contentLines.push(line);
        }
    }
    const content = contentLines.join('\n');
    const kv = kvContent.join('\n');
    Object.assign(slide, (0, lexer_1.parseKV)(kv));
    slide.content = (0, content_1.parseContent)(content);
    return slide;
}
//# sourceMappingURL=slide.js.map