"use strict";
// File: omniscript-core/parser/src/serializers/table.ts
// What: Serializer for @table blocks
// Why: Round-trip support for tables
// Related: block-parsers/table.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeTableBlock = serializeTableBlock;
const strings_1 = require("../lexer/strings");
function serializeTableBlock(block) {
    const parts = ['@table {'];
    // Add properties
    if (block.caption) {
        parts.push(`  caption: "${(0, strings_1.escapeString)(block.caption)}";`);
    }
    if (block.style) {
        parts.push(`  style: "${block.style}";`);
    }
    if (block.alignment) {
        const alignmentStr = block.alignment.map(a => `"${a}"`).join(', ');
        parts.push(`  alignment: [${alignmentStr}];`);
    }
    // Add blank line before table
    if (block.caption || block.style || block.alignment) {
        parts.push('');
    }
    // Add header row
    parts.push('  ' + formatTableRow(block.headers));
    // Add separator row
    parts.push('  ' + formatSeparatorRow(block.headers.length));
    // Add data rows
    for (const row of block.rows) {
        parts.push('  ' + formatTableRow(row.cells.map(c => c.text)));
    }
    parts.push('}');
    return parts.join('\n');
}
function formatTableRow(cells) {
    return '| ' + cells.join(' | ') + ' |';
}
function formatSeparatorRow(columnCount) {
    const separators = Array(columnCount).fill('---');
    return '| ' + separators.join(' | ') + ' |';
}
//# sourceMappingURL=table.js.map